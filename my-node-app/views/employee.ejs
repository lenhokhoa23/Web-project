<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee List</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>

<body>
    <!-- Include sidebar -->
    <%- include('partials/sidebar.ejs') %>

    <div class="main-content">
        <header>
            <h2>Thông tin cơ bản</h2>
            <input type="text" id="search-bar" placeholder="Tìm kiếm nhân viên..." onkeyup="searchEmployees()">
        </header>

        <section class="employee-table">
            <table id="employee-table">
                <thead>
                    <tr>
                        <th onclick="sortTable('Employee_ID')">Mã Nhân viên</th>
                        <th onclick="sortTable('EmployeeName')">Tên Nhân viên</th>
                        <th onclick="sortTable('StartDate')">Ngày tham gia</th>
                        <th onclick="sortTable('Department_ID')">Mã Phòng</th>
                        <th onclick="sortTable('PhoneNumber')">Số điện thoại</th>
                        <th onclick="sortTable('Email')">Email</th>
                        <th onclick="sortTable('EmployeeAddress')">Địa chỉ</th>
                    </tr>
                </thead>
                <tbody id="employee-data">
                    <!-- Dữ liệu nhân viên sẽ được chèn vào đây -->
                </tbody>
            </table>
        </section>
    </div>

    <script>
        let employees = []; // Biến toàn cục lưu trữ dữ liệu nhân viên
        let currentSortColumn = ''; // Theo dõi cột hiện tại đang được sắp xếp
        let isAscending = true; // Theo dõi thứ tự sắp xếp

        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = ("0" + date.getDate()).slice(-2); // Lấy ngày, thêm 0 nếu nhỏ hơn 10
            const month = ("0" + (date.getMonth() + 1)).slice(-2); // Lấy tháng, thêm 0 nếu nhỏ hơn 10
            const year = date.getFullYear(); // Lấy năm
            return `${day}/${month}/${year}`; // Định dạng ngày/tháng/năm
        }

        function searchEmployees() {
            const input = document.getElementById('search-bar').value.trim().toLowerCase();
            const table = document.getElementById('employee-table');
            const rows = table.getElementsByTagName('tr');

            // Kiểm tra nếu nhập số và dấu cách (ví dụ "7 ")
            const isExactIdSearch = /^\d+\s$/.test(input);

            for (let i = 1; i < rows.length; i++) { // Bắt đầu từ 1 để bỏ qua header
                let cells = rows[i].getElementsByTagName('td');
                let employeeId = cells[0].innerHTML.trim(); // Lấy Mã Nhân viên
                let match = false;

                if (isExactIdSearch) {
                    // Nếu đúng định dạng "số và dấu cách", so khớp Mã Nhân viên
                    if (employeeId === input.trim()) {
                        match = true;
                    }
                } else {
                    // Tìm kiếm thông thường qua tất cả các cột
                    for (let j = 0; j < cells.length; j++) {
                        if (cells[j].innerHTML.toLowerCase().indexOf(input) > -1) {
                            match = true;
                            break;
                        }
                    }
                }

                // Hiển thị hoặc ẩn hàng dựa trên kết quả tìm kiếm
                if (match) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }

        // Hàm sắp xếp cột
        function sortTable(column) {
            if (currentSortColumn === column) {
                // Nếu cột hiện tại đã được sắp xếp, đảo ngược thứ tự
                isAscending = !isAscending;
            } else {
                // Nếu cột khác được chọn, thiết lập thứ tự sắp xếp tăng dần
                currentSortColumn = column;
                isAscending = true;
            }

            // Sắp xếp dữ liệu theo cột đã chọn
            employees.sort((a, b) => {
                let aValue = a[column];
                let bValue = b[column];

                // Nếu cột là "StartDate", cần chuyển đổi thành đối tượng Date để sắp xếp
                if (column === 'StartDate') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }

                // So sánh giá trị
                if (aValue < bValue) return isAscending ? -1 : 1;
                if (aValue > bValue) return isAscending ? 1 : -1;
                return 0;
            });

            // Hiển thị dữ liệu đã sắp xếp
            displayEmployees();
        }

        // Hàm hiển thị dữ liệu nhân viên ra bảng
        function displayEmployees() {
            const tableBody = document.getElementById('employee-data');
            tableBody.innerHTML = ''; // Xóa dữ liệu cũ trước khi thêm mới

            employees.forEach(employee => {
                const row = document.createElement('tr');
                row.innerHTML = `
                <td>${employee.Employee_ID}</td>
                <td>${employee.EmployeeName}</td>
                <td>${formatDate(employee.StartDate)}</td>
                <td>${employee.Department_ID}</td>
                <td>${employee.PhoneNumber}</td>
                <td>${employee.Email}</td>
                <td>${employee.EmployeeAddress}</td>`;
                tableBody.appendChild(row);
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetch('/api/employees')
            .then(response => response.json())
            .then(data => {
                employees = data; // Lưu trữ dữ liệu nhân viên vào biến toàn cục
                displayEmployees(); // Hiển thị dữ liệu ban đầu
            })
            .catch(error => console.error('Error fetching employee data:', error));
        });
    </script>
    
</body>
</html>
